name: Java CI with Maven

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest  # Use a GitHub-hosted runner for simplicity

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'

      - name: Cache Maven dependencies
        uses: actions/cache@v2
        with:
          path: ~/.m2/repository
          key: maven-${{ runner.os }}-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            maven-${{ runner.os }}-

      - name: Build with Maven
        run: mvn -B package --file pom.xml

      - name: Stop Existing Java Application
        run: |
          PID=$(lsof -t -i:80)  # Find the PID of the process listening on port 80
          if [ -n "$PID" ]; then
            echo "Stopping existing Java application (PID $PID)..."
            kill $PID  # Stop the Java application gracefully
            wait $PID  # Wait for the process to terminate
          else
            echo "No existing Java application found running on port 80."
          fi

      - name: Start Java Application
        run: java -jar ./target/hostal-0.0.1-SNAPSHOT.jar &

      - name: Check Java Application Status
        run: sleep 10 && curl -I http://localhost:80  # Adjust the URL and sleep time as needed for your application

      - name: Display Logs
        run: cat nohup.out  # Display the application's logs

      - name: Cleanup
        run: |
          PID=$(lsof -t -i:80)  # Find the PID of the process listening on port 80
          if [ -n "$PID" ]; then
            echo "Stopping Java application (PID $PID)..."
            kill $PID  # Stop the Java application gracefully
            wait $PID  # Wait for the process to terminate
          else
            echo "No Java application found running on port 80."
          fi
